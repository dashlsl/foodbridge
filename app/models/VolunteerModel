<?php

namespace App\Models;

if (!defined('ACCESS')) {
    http_response_code(404);
    die();
}

use PDO;
use App\Models\DatabaseModel;

class VolunteerModel
{
    /** Get all available (pending) deliveries */
    public function getPendingDeliveries()
    {
        $sql = <<<SQL
            SELECT
                fd.donation_id,
                fd.food_description,
                fd.quantity,
                u.address,
                fd.pickup_time
            FROM
                food_donations fd
            JOIN
                users u ON fd.donor_id = u.user_id
            WHERE
                fd.status = 'pending'
        SQL;

        return DatabaseModel::exec($sql)->fetchAll(PDO::FETCH_ASSOC);
    }

    /** Assign volunteer to a delivery */
    public function assignVolunteer($deliveryId, $volunteerId)
    {
        $sql = <<<SQL
            UPDATE
                food_delivery 
            SET
                volunteer_id = :volunteer_id, pickup_status = 'in_progress' 
            WHERE
                delivery_id = :delivery_id
        SQL;

        $params = [
            ':delivery_id' => $deliveryId,
            ':volunteer_id' => $volunteerId,
        ];

        DatabaseModel::exec($sql, $params);

        return true;
    }

    /** Update delivery and pickup status */
    public function updateDeliveryStatus($deliveryId, $status)
    {
        // Update food_delivery status
        $sql = <<<SQL
            UPDATE
                food_delivery
            SET
                pickup_status = :pickup_status, delivery_status = CASE 
                WHEN
                    :pickup_status = 'completed' THEN 'delivered' 
                ELSE
                    delivery_status 
            END 
            WHERE
            delivery_id = :delivery_id
        SQL;

        $params = [
            ':delivery_id' => $deliveryId,
            ':status' => $status
        ];

        DatabaseModel::exec($sql, $params);

        // Update food_donations status
        $newFoodStatus = ($status === 'completed') ? 'delivered' : 'picked_up';
        $sql_don = <<<SQL
            UPDATE
                food_donations 
            SET
                status = :status 
            WHERE
                donation_id = (
                    SELECT donation_id
                    FROM food_delivery
                    WHERE delivery_id = :delivery_id)
        SQL;

        $params_don = [
            ':delivery_id' => $deliveryId,
            ':status' => $newFoodStatus
        ];

        DatabaseModel::exec($sql_don, $params_don);

        return true;
    }


    ///


    /** Get volunteer pickup tasks */
    public function getPickupTasks($volunteerId)
    {
        $sql = <<<SQL
            SELECT
                fd.donation_id, fd.food_description, fd.quantity, fd.pickup_time, fd.status AS donation_status,
                fdc.pickup_status, fdc.delivery_status
            FROM
                food_donations fd
            JOIN
                food_delivery fdc ON fd.donation_id = fdc.donation_id
            WHERE
                fdc.volunteer_id = :volunteer_id AND fdc.pickup_status IN ('pending', 'in_progress')
            ORDER BY
                fd.pickup_time ASC
        SQL;

        $params = [
            ':volunteer_id' => $volunteerId
        ];

        return DatabaseModel::exec($sql, $params)->fetchAll(PDO::FETCH_ASSOC);
    }

    /** Get volunteer delivery tasks */
    public function getDeliveryTasks($volunteerId)
    {
        $sql = <<<SQL
            SELECT
                fd.donation_id, fd.food_description, fd.quantity, fd.pickup_time, fd.status AS donation_status,
                fdc.delivery_time, fdc.delivery_status
            FROM
                food_donations fd
            JOIN
                food_delivery fdc ON fd.donation_id = fdc.donation_id
            WHERE
                fdc.volunteer_id = :volunteer_id AND fdc.delivery_status = 'scheduled'
            ORDER BY
                fdc.delivery_time ASC
        SQL;

        $params = [
            ':volunteer_id' => $volunteerId
        ];

        return DatabaseModel::exec($sql, $params)->fetchAll(PDO::FETCH_ASSOC);
    }

    /** Get volunteer details by user ID */
    public function getVolunteerByUserId($userId)
    {
        $sql = <<<SQL
            SELECT
                *
            FROM
                users
            WHERE
                user_id = :user_id AND role = 'volunteer'
        SQL;

        $params = [
            ':user_id' => $userId
        ];

        return DatabaseModel::exec($sql, $params)->fetch(PDO::FETCH_ASSOC);
    }

    /** Get all volunteers */
    public function getAllVolunteers()
    {
        $sql = <<<SQL
            SELECT
                *
            FROM
                users
            WHERE
                role = 'volunteer'
        SQL;

        return DatabaseModel::exec($sql)->fetchAll(PDO::FETCH_ASSOC);
    }
}
